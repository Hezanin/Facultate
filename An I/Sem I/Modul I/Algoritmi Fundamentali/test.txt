algoritm sumaDiagonale(matrice[][], n, suma)
suma = 0;

for (int i=0; i < n; i++)
{
	for (int j=0; j < n; i++)
	{
		cout << matrice[i][j]  //citim matricea
	}	
}

for (int i=0; i < n; i++)
{
	suma = suma + matrice[i][i];	//suma diagonala principala
}
end for

for (int i=0; i < n; i++)
{
	suma = suma + matrice[i][n-1-i];  //suma diagonala secundara
}
end for

return suma;
end alg

Algortim sterge (v[], n, elem)
for i = elem to n
{
	v[i] = v[i+1]
}
n = n - 1

for i = 0 to n
{
	printeaza v[i]
}
return v;

1,2,3,4,5,6,7
1,3,4,5,6,7,7


algoritm adaugaColoana(a[][],b[][], n, m, indexAles)
cin >> indexAles;
cin >> n;
cin >> m;
int m_2;
m_2 = m + 1;
int a[n][m];
int count = 0;
int b[n][m_2]; // aceeasi marime dar marita cu 1 pentru coloana

{
	for(int i = 0; i < n; i++ )
	{
		for(int j = 0; j < m; j++)
		{
			if(j < elem)
			{
				b[i][count++] = a[i][j]
			}
			if(j = elem)
			{
				cin >> b[i][count++] 
			}
			if(j > elem)
			{
				b[i][count++] = a[i][j]
			}
		}
	}
}
end for 
end for
return b[]
end algo


20 / 5  -da
20 / 10 = 2



n = 103456
z = 0 
p = 1
c

c = n % 10
n = n / 10

c = 6
n = 10345

z = z + p * (9 - c);
p = p * 10


0 + 1 * 3
3

3 + 10 * 9 - 3
3 + 90 - 3
90 







































